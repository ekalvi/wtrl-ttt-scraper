from typing import List

import plotly.graph_objects as go
import pandas as pd
import os

from config import RESULTS_DIR
from config import Config
from wtrl_ttt_scraper.format import slugify

HTML_HEAD = """
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>WTRL TTT Results</title>
        <link rel="icon" href="data:image/svg+xml,<svg xmlns=%22http://www.w3.org/2000/svg%22 viewBox=%220 0 100 100%22><text y=%22.9em%22 font-size=%2290%22>üèÅ</text></svg>">
        <!-- Tailwind CSS -->
        <script src="https://cdn.tailwindcss.com"></script>
        <!-- DataTables CSS -->
        <link rel="stylesheet" href="https://cdn.datatables.net/1.13.5/css/jquery.dataTables.min.css">
        <!-- jQuery and DataTables -->
        <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
        <script src="https://cdn.datatables.net/1.13.5/js/jquery.dataTables.min.js"></script>
        <style>
            #sortable_table {
                margin-bottom: 10px;
            }
            #sortable_table_length  {
                padding-bottom: 10px;
                color: #444;
            }
            #sortable_table_filter  {
                padding-bottom: 10px;
                color: #444;
            }
            table tbody tr:nth-child(odd) {{
                background-color: #f9fafb;
            }}
            table tbody tr:nth-child(even) {{
                background-color: #ffffff;
            }}
            table tbody td {
                white-space: nowrap;
            }
        </style>
    </head>
"""


GITHUB_REPO_URL = "https://github.com/ekalvi/wtrl-ttt-scraper"
HTML_FOOTER = f"""
            <footer class="mt-10 ml-10 mr-10 mb-30 pt-4 border-t border-gray-200 text-left text-sm">
                <div class="flex items-center gap-2">
                    <span>Generated by</span>
                    <a href="{GITHUB_REPO_URL}" target="_blank" class="text-gray-600 hover:text-blue-500 flex items-center gap-1">
                        <svg xmlns="http://www.w3.org/2000/svg" class="w-5 h-5 fill-current" viewBox="0 0 24 24">
                            <path d="M12 0C5.37 0 0 5.37 0 12c0 5.303 3.438 9.8 8.205 11.385.6.113.82-.258.82-.577v-2.03c-3.338.726-4.042-1.415-4.042-1.415-.546-1.387-1.333-1.757-1.333-1.757-1.09-.744.082-.729.082-.729 1.205.084 1.84 1.237 1.84 1.237 1.07 1.835 2.809 1.305 3.495.997.107-.775.42-1.305.764-1.605-2.665-.303-5.467-1.333-5.467-5.93 0-1.31.467-2.382 1.236-3.22-.124-.303-.535-1.523.117-3.176 0 0 1.008-.322 3.3 1.23a11.47 11.47 0 013.004-.404c1.02.004 2.044.138 3.003.404 2.291-1.552 3.297-1.23 3.297-1.23.654 1.653.243 2.873.12 3.176.77.838 1.235 1.91 1.235 3.22 0 4.61-2.807 5.624-5.479 5.921.43.372.815 1.102.815 2.222v3.293c0 .322.217.694.824.576C20.565 21.797 24 17.3 24 12 24 5.37 18.63 0 12 0z"/>
                        </svg>
                        WTRL TTT Scraper
                    </a>
                </div>
            </footer>
"""


def render_percentile_chart(df) -> str:
    """
    Renders a Plotly chart displaying the percentile trend with a monotonic y-axis.

    Args:
        df (pd.DataFrame): DataFrame containing the 'Race' and 'Percentile' columns.
    """
    # Create the chart
    percentile_chart = go.Figure()

    # Add the percentile line
    percentile_chart.add_trace(
        go.Scatter(
            x=df["Race"],
            y=df["Percentile"],
            mode="lines+markers",
            name="Percentile",
        )
    )

    # Ensure y-axis is monotonic by setting its range
    min_percentile = max(
        0, df["Percentile"].min() - 5
    )  # Small buffer below the min value
    max_percentile = min(
        100, df["Percentile"].max() + 5
    )  # Small buffer above the max value

    # Update chart layout
    percentile_chart.update_layout(
        xaxis=dict(title="Race"),
        yaxis=dict(
            title="Percentile",
            range=[min_percentile, max_percentile],  # Set the y-axis range
            showgrid=True,
        ),
        height=500,  # Adjust height if needed
    )

    return percentile_chart.to_html(full_html=False, include_plotlyjs="cdn")


def render_results_table(df) -> str:
    # Convert the DataFrame to HTML with Tailwind classes
    return df.to_html(
        index=False,
        classes="table-auto border border-collapse text-left w-full",
        table_id="sortable_table",
    )


def generate_index_html(teams: List[str]):
    """
    Generates an index.html file with links to all the generated HTML files in the directory.

    Args:
        teams List[str]: The list of teams tracked
    """
    os.makedirs(RESULTS_DIR, exist_ok=True)
    config = Config.load()

    # Start building the index.html content
    index_content = f"""
    <!DOCTYPE html>
    <html lang="en">
    {HTML_HEAD}
    <body>
        <div class="container mx-auto">
            <h1 class="text-2xl font-bold text-left mt-10 ml-10 mr-10">üèÅ üö¥ WTRL TTT Results - {config.club_name}</h1>
            <ul class="list-disc mt-10 ml-20 mr-10">
    """

    # Add links to each HTML file
    for team in teams:
        index_content += f"""
            <li><a class="text-blue-500 hover:underline font-medium" href="{slugify(team)}.html">{team}</a></li>
        """
    # Close the HTML content
    index_content += f"""
            </ul>
            {HTML_FOOTER}
        </div>
    </body>
    </html>
    """

    # Write the index.html file to the output directory
    output_file = os.path.join(RESULTS_DIR, "index.html")
    with open(output_file, "w") as index_file:
        index_file.write(index_content)

    print(f"+{output_file}")


def render_results(summary_stats: list, team: str):
    os.makedirs(RESULTS_DIR, exist_ok=True)

    # Convert summary stats to a DataFrame
    df = pd.DataFrame(summary_stats)

    # Generate the final HTML
    dashboard_html = f"""
    <!DOCTYPE html>
    <html lang="en">
    {HTML_HEAD}
    <body>
        <div class="container mx-auto">
            <h1 class="text-2xl font-bold text-left ml-10 mr-10 mt-10">
                üèÅ üö¥ WTRL TTT Results - {team}
            </h1>
            <div class="ml-10 mt-5 mb-5">
                <a href="." class="text-blue-500 hover:underline font-medium">‚¨Ö All results</a>
            </div>
            <div>{render_percentile_chart(df)}</div>
            <div class="table-container text-sm">
                {render_results_table(df)}
            </div>
            {HTML_FOOTER}
        </div>
        <script>
            $(document).ready(function() {{
                $('#sortable_table').DataTable({{
                    order: [[0, 'desc']], // Sort Race # column in descending order
                }});
            }});
        </script>
    </body>
    </html>
    """

    # Save the dashboard to an HTML file
    filename = slugify(team)
    output_file = f"{RESULTS_DIR}/{filename}.html"
    with open(output_file, "w") as f:
        f.write(dashboard_html)

    print(f"+{output_file}")
